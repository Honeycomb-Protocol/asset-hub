export type Assembler = {
  "version": "0.1.0",
  "name": "assembler",
  "instructions": [
    {
      "name": "createAssembler",
      "accounts": [
        {
          "name": "collectionMint",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "Collection of the nfts generated by this assembler"
          ]
        },
        {
          "name": "collectionMetadata",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Metadata account of the collection"
          ]
        },
        {
          "name": "collectionMasterEdition",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Master Edition account of the collection"
          ]
        },
        {
          "name": "assembler",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Assembler state account"
          ]
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The wallet that holds the authority over the assembler"
          ]
        },
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The wallet that pays for the rent"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "NATIVE SYSTEM PROGRAM"
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "SPL TOKEN PROGRAM"
          ]
        },
        {
          "name": "tokenMetadataProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "METAPLEX TOKEN METADATA PROGRAM"
          ]
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "SYSVAR RENT"
          ]
        },
        {
          "name": "sysvarInstructions",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "NATIVE Instructions SYSVAR"
          ]
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "CreateAssemblerArgs"
          }
        }
      ]
    },
    {
      "name": "updateAssembler",
      "accounts": [
        {
          "name": "assembler",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Assembler state account"
          ]
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": true,
          "docs": [
            "The wallet that holds the authority over the assembler"
          ]
        },
        {
          "name": "delegate",
          "isMut": false,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "[Optional] the delegate of the assembler"
          ]
        },
        {
          "name": "newAuthority",
          "isMut": false,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "[Optional] The new wallet that will hold the authority over the assembler"
          ]
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "UpdateAssemblerArgs"
          }
        }
      ]
    },
    {
      "name": "createDelegateAuthority",
      "accounts": [
        {
          "name": "assembler",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Assembler state account"
          ]
        },
        {
          "name": "delegateAuthority",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "the delegate authority account"
          ]
        },
        {
          "name": "delegate",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "the wallet that holds delegate authority"
          ]
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": true,
          "docs": [
            "The wallet that holds the authority over the assembler"
          ]
        },
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The wallet that pays for everything"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "NATIVE SYSTEM PROGRAM"
          ]
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "CreateDelegateAuthorityArgs"
          }
        }
      ]
    },
    {
      "name": "createBlock",
      "accounts": [
        {
          "name": "assembler",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Assembler state account"
          ]
        },
        {
          "name": "block",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Block account"
          ]
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": true,
          "docs": [
            "The wallet that holds the authority over the assembler"
          ]
        },
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The wallet that pays for the rent"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "NATIVE SYSTEM PROGRAM"
          ]
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "CreateBlockArgs"
          }
        }
      ]
    },
    {
      "name": "createBlockDefinition",
      "accounts": [
        {
          "name": "assembler",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Assembler state account"
          ]
        },
        {
          "name": "block",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Block account"
          ]
        },
        {
          "name": "blockDefinition",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Block Definition account"
          ]
        },
        {
          "name": "blockDefinitionMint",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Mint of the SFT/Collection"
          ]
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": true,
          "docs": [
            "The wallet that holds the authority over the assembler"
          ]
        },
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The wallet that pays for the rent"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "NATIVE SYSTEM PROGRAM"
          ]
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "BlockDefinitionValue"
          }
        }
      ]
    },
    {
      "name": "createNft",
      "accounts": [
        {
          "name": "assembler",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Assembler state account"
          ]
        },
        {
          "name": "collectionMint",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The collection mint of the assembler"
          ]
        },
        {
          "name": "collectionMetadataAccount",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Metadata account of the collection"
          ]
        },
        {
          "name": "collectionMasterEdition",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Master Edition account of the collection"
          ]
        },
        {
          "name": "nftMint",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "NFT mint account"
          ]
        },
        {
          "name": "nftMetadata",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Metadata account of the NFT"
          ]
        },
        {
          "name": "nftMasterEdition",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Master Edition account of the NFT"
          ]
        },
        {
          "name": "nft",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "NFT account"
          ]
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The wallet that holds the pre mint authority over this NFT"
          ]
        },
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The wallet that pays for the rent"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "NATIVE SYSTEM PROGRAM"
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "SPL TOKEN PROGRAM"
          ]
        },
        {
          "name": "tokenMetadataProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "METAPLEX TOKEN METADATA PROGRAM"
          ]
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "SYSVAR RENT"
          ]
        },
        {
          "name": "sysvarInstructions",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "NATIVE Instructions SYSVAR"
          ]
        }
      ],
      "args": []
    },
    {
      "name": "addBlock",
      "accounts": [
        {
          "name": "assembler",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Assembler state account"
          ]
        },
        {
          "name": "nft",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "NFT account"
          ]
        },
        {
          "name": "block",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Block account"
          ]
        },
        {
          "name": "blockDefinition",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Block definition account"
          ]
        },
        {
          "name": "tokenMint",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Attribute token mint"
          ]
        },
        {
          "name": "tokenAccount",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Attribute token account"
          ]
        },
        {
          "name": "tokenMetadata",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Attribute token metadata"
          ]
        },
        {
          "name": "tokenEdition",
          "isMut": false,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "Attribute token edition"
          ]
        },
        {
          "name": "tokenRecord",
          "isMut": true,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "Attribute token record"
          ]
        },
        {
          "name": "depositAccount",
          "isMut": true,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "The account that will hold the nft sent on expedition"
          ]
        },
        {
          "name": "depositTokenRecord",
          "isMut": true,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "Deposit token_record"
          ]
        },
        {
          "name": "authority",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The wallet that has pre mint authority over this NFT"
          ]
        },
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The wallet that pays for the rent"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "NATIVE SYSTEM PROGRAM"
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "SPL TOKEN PROGRAM"
          ]
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "ASSOCIATED TOKEN PROGRAM"
          ]
        },
        {
          "name": "tokenMetadataProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "METAPLEX TOKEN METADATA PROGRAM"
          ]
        },
        {
          "name": "sysvarInstructions",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "NATIVE Instructions SYSVAR"
          ]
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "SYSVAR RENT"
          ]
        }
      ],
      "args": []
    },
    {
      "name": "mintNft",
      "accounts": [
        {
          "name": "assembler",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Assembler state account"
          ]
        },
        {
          "name": "nft",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "NFT account"
          ]
        },
        {
          "name": "nftMint",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "NFT mint account"
          ]
        },
        {
          "name": "nftMetadata",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Metadata account of the NFT"
          ]
        },
        {
          "name": "nftMasterEdition",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Master Edition account of the NFT"
          ]
        },
        {
          "name": "nftTokenRecord",
          "isMut": true,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "NFT token record"
          ]
        },
        {
          "name": "tokenAccount",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "NFT token account"
          ]
        },
        {
          "name": "uniqueConstraint",
          "isMut": true,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "NFT unique constraint"
          ]
        },
        {
          "name": "authority",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The wallet that has pre mint authority over this NFT"
          ]
        },
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The wallet that pays for the rent"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "NATIVE SYSTEM PROGRAM"
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "SPL TOKEN PROGRAM"
          ]
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "ASSOCIATED TOKEN PROGRAM"
          ]
        },
        {
          "name": "tokenMetadataProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "METAPLEX TOKEN METADATA PROGRAM"
          ]
        },
        {
          "name": "sysvarInstructions",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "NATIVE Instructions SYSVAR"
          ]
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "SYSVAR RENT"
          ]
        }
      ],
      "args": []
    },
    {
      "name": "burnNft",
      "accounts": [
        {
          "name": "assembler",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Assembler state account"
          ]
        },
        {
          "name": "nft",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "NFT account"
          ]
        },
        {
          "name": "nftMint",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "NFT mint account"
          ]
        },
        {
          "name": "nftMetadata",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Metadata account of the NFT"
          ]
        },
        {
          "name": "tokenAccount",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "NFT token account"
          ]
        },
        {
          "name": "uniqueConstraint",
          "isMut": true,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "NFT unique constraint"
          ]
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": true,
          "docs": [
            "The wallet that holds the pre mint authority over this NFT"
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "SPL TOKEN PROGRAM"
          ]
        },
        {
          "name": "tokenMetadataProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "METAPLEX TOKEN METADATA PROGRAM"
          ]
        }
      ],
      "args": []
    },
    {
      "name": "removeBlock",
      "accounts": [
        {
          "name": "assembler",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Assembler state account"
          ]
        },
        {
          "name": "nft",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "NFT account"
          ]
        },
        {
          "name": "block",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Block account"
          ]
        },
        {
          "name": "blockDefinition",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Block definition account"
          ]
        },
        {
          "name": "tokenMint",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Burning token mint"
          ]
        },
        {
          "name": "tokenAccount",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Burning token account"
          ]
        },
        {
          "name": "tokenMetadata",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Burning token metadata"
          ]
        },
        {
          "name": "tokenEdition",
          "isMut": false,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "Burning token edition"
          ]
        },
        {
          "name": "tokenRecord",
          "isMut": true,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "Attribute token record"
          ]
        },
        {
          "name": "depositAccount",
          "isMut": true,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "The account that will hold the nft sent on expedition"
          ]
        },
        {
          "name": "depositTokenRecord",
          "isMut": true,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "Deposit token_record"
          ]
        },
        {
          "name": "authority",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The wallet that has pre mint authority over this NFT"
          ]
        },
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The wallet that pays for the rent"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "SYSTEM PROGRAM"
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "SPL TOKEN PROGRAM"
          ]
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "ASSOCIATED TOKEN PROGRAM"
          ]
        },
        {
          "name": "tokenMetadataProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "METAPLEX TOKEN METADATA PROGRAM"
          ]
        },
        {
          "name": "sysvarInstructions",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "NATIVE Instructions SYSVAR"
          ]
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "RENT PROGRAM"
          ]
        }
      ],
      "args": []
    },
    {
      "name": "setNftGenerated",
      "accounts": [
        {
          "name": "assembler",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Assembler state account"
          ]
        },
        {
          "name": "nft",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The nft account"
          ]
        },
        {
          "name": "nftMetadata",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Metadata account of the NFT"
          ]
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": true,
          "docs": [
            "The wallet that holds the authority to execute this instruction"
          ]
        },
        {
          "name": "delegate",
          "isMut": false,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "[Optional] the delegate of the assembler"
          ]
        },
        {
          "name": "tokenMetadataProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "METAPLEX TOKEN METADATA PROGRAM"
          ]
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "SetNFTGeneratedArgs"
          }
        }
      ]
    },
    {
      "name": "updateMetadata",
      "accounts": [
        {
          "name": "assembler",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Assembler state account"
          ]
        },
        {
          "name": "nft",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The nft account"
          ]
        },
        {
          "name": "metadata",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Metadata account of the NFT"
          ]
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": true,
          "docs": [
            "The wallet that holds the authority to execute this instruction"
          ]
        },
        {
          "name": "delegate",
          "isMut": false,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "[Optional] the delegate of the assembler"
          ]
        },
        {
          "name": "tokenMetadataProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "METAPLEX TOKEN METADATA PROGRAM"
          ]
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "UpdateMetadataArgs"
          }
        }
      ]
    }
  ],
  "accounts": [
    {
      "name": "assembler",
      "docs": [
        "Assembler state account"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "authority",
            "docs": [
              "The wallet that has authority to modify the assembler"
            ],
            "type": "publicKey"
          },
          {
            "name": "collection",
            "docs": [
              "The collection address of the assembler generated NFTs"
            ],
            "type": "publicKey"
          },
          {
            "name": "collectionName",
            "docs": [
              "The collection name to be associated with each nft"
            ],
            "type": "string"
          },
          {
            "name": "collectionSymbol",
            "docs": [
              "The collection symbol to be associated with each nft"
            ],
            "type": "string"
          },
          {
            "name": "collectionDescription",
            "docs": [
              "The collection description to be associated with each nft"
            ],
            "type": "string"
          },
          {
            "name": "nftBaseUri",
            "docs": [
              "The base uri of each nft metadata"
            ],
            "type": "string"
          },
          {
            "name": "assemblingAction",
            "docs": [
              "Action to take for the block SFT while assembling"
            ],
            "type": {
              "defined": "AssemblingAction"
            }
          },
          {
            "name": "nfts",
            "docs": [
              "The number of NFTs created by this assembler"
            ],
            "type": "u16"
          },
          {
            "name": "allowDuplicates",
            "docs": [
              "Should this assembler allow duplicate NFTs"
            ],
            "type": "bool"
          },
          {
            "name": "defaultRoyalty",
            "docs": [
              "Default royalty percentage"
            ],
            "type": "u16"
          },
          {
            "name": "tokenStandard",
            "docs": [
              "Token Standard"
            ],
            "type": {
              "defined": "TokenStandard"
            }
          },
          {
            "name": "ruleSet",
            "docs": [
              "pNFT rule set"
            ],
            "type": {
              "option": "publicKey"
            }
          },
          {
            "name": "defaultCreators",
            "docs": [
              "Default creators"
            ],
            "type": {
              "vec": {
                "defined": "Creator"
              }
            }
          }
        ]
      }
    },
    {
      "name": "block",
      "docs": [
        "Block account"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "assembler",
            "docs": [
              "The assembler this block is associated to"
            ],
            "type": "publicKey"
          },
          {
            "name": "blockOrder",
            "docs": [
              "The order of the block in layers"
            ],
            "type": "u8"
          },
          {
            "name": "isGraphical",
            "docs": [
              "Is there a image for this block"
            ],
            "type": "bool"
          },
          {
            "name": "blockType",
            "docs": [
              "The type of the block/trait_type"
            ],
            "type": {
              "defined": "BlockType"
            }
          },
          {
            "name": "blockName",
            "docs": [
              "The name of the block"
            ],
            "type": "string"
          },
          {
            "name": "blockDefinationCounts",
            "docs": [
              "The name of the block"
            ],
            "type": "u16"
          }
        ]
      }
    },
    {
      "name": "blockDefinition",
      "docs": [
        "Block Definition Account"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "block",
            "docs": [
              "The block this definition is associated to"
            ],
            "type": "publicKey"
          },
          {
            "name": "mint",
            "docs": [
              "The mint address of the block definition"
            ],
            "type": "publicKey"
          },
          {
            "name": "value",
            "docs": [
              "The value of the block definition"
            ],
            "type": {
              "defined": "BlockDefinitionValue"
            }
          },
          {
            "name": "definationIndex",
            "type": "u16"
          }
        ]
      }
    },
    {
      "name": "nft",
      "docs": [
        "NFT state account"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "assembler",
            "docs": [
              "The assembler this NFT is associated to"
            ],
            "type": "publicKey"
          },
          {
            "name": "authority",
            "docs": [
              "The wallet that has pre mint authority over this NFT"
            ],
            "type": "publicKey"
          },
          {
            "name": "collectionAddress",
            "docs": [
              "The collection address of this NFT"
            ],
            "type": "publicKey"
          },
          {
            "name": "mint",
            "docs": [
              "The mint address of this NFT"
            ],
            "type": "publicKey"
          },
          {
            "name": "name",
            "docs": [
              "The name of the NFT"
            ],
            "type": "string"
          },
          {
            "name": "symbol",
            "docs": [
              "The symbol of the NFT"
            ],
            "type": "string"
          },
          {
            "name": "description",
            "docs": [
              "The description of the NFT"
            ],
            "type": "string"
          },
          {
            "name": "minted",
            "docs": [
              "Flag if this NFT is minted"
            ],
            "type": "bool"
          },
          {
            "name": "id",
            "docs": [
              "The id of the NFT"
            ],
            "type": "u16"
          },
          {
            "name": "uri",
            "docs": [
              "The uri of the NFT"
            ],
            "type": "string"
          },
          {
            "name": "isGenerated",
            "docs": [
              "Flag if the image for this nft is already generated"
            ],
            "type": "bool"
          },
          {
            "name": "attributes",
            "docs": [
              "NFT Attributes"
            ],
            "type": {
              "vec": {
                "defined": "NFTAttribute"
              }
            }
          }
        ]
      }
    },
    {
      "name": "nftUniqueConstraint",
      "docs": [
        "NFT Unique Constraint account"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "nft",
            "docs": [
              "The NFT this constraint is associated to"
            ],
            "type": "publicKey"
          }
        ]
      }
    },
    {
      "name": "delegateAuthority",
      "docs": [
        "Delegate Authority"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "authority",
            "docs": [
              "The delegate authority"
            ],
            "type": "publicKey"
          },
          {
            "name": "permission",
            "docs": [
              "The permission of the delegate authority"
            ],
            "type": {
              "defined": "DelegateAuthorityPermission"
            }
          }
        ]
      }
    }
  ],
  "types": [
    {
      "name": "CreateAssemblerArgs",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "assemblingAction",
            "type": {
              "defined": "AssemblingAction"
            }
          },
          {
            "name": "collectionName",
            "type": "string"
          },
          {
            "name": "collectionSymbol",
            "type": "string"
          },
          {
            "name": "collectionUri",
            "type": "string"
          },
          {
            "name": "collectionDescription",
            "type": "string"
          },
          {
            "name": "nftBaseUri",
            "type": "string"
          },
          {
            "name": "allowDuplicates",
            "type": {
              "option": "bool"
            }
          },
          {
            "name": "defaultRoyalty",
            "type": {
              "option": "u16"
            }
          },
          {
            "name": "tokenStandard",
            "type": {
              "option": {
                "defined": "TokenStandard"
              }
            }
          },
          {
            "name": "ruleSet",
            "type": {
              "option": "publicKey"
            }
          },
          {
            "name": "defaultCreators",
            "type": {
              "vec": {
                "defined": "Creator"
              }
            }
          }
        ]
      }
    },
    {
      "name": "UpdateAssemblerArgs",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "assemblingAction",
            "type": {
              "defined": "AssemblingAction"
            }
          },
          {
            "name": "nftBaseUri",
            "type": "string"
          },
          {
            "name": "allowDuplicates",
            "type": {
              "option": "bool"
            }
          },
          {
            "name": "defaultRoyalty",
            "type": {
              "option": "u16"
            }
          }
        ]
      }
    },
    {
      "name": "CreateDelegateAuthorityArgs",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "permission",
            "type": {
              "defined": "DelegateAuthorityPermission"
            }
          }
        ]
      }
    },
    {
      "name": "CreateBlockArgs",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "blockOrder",
            "type": "u8"
          },
          {
            "name": "isGraphical",
            "type": "bool"
          },
          {
            "name": "blockType",
            "type": {
              "defined": "BlockType"
            }
          },
          {
            "name": "blockName",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "SetNFTGeneratedArgs",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "newUri",
            "type": {
              "option": "string"
            }
          }
        ]
      }
    },
    {
      "name": "UpdateMetadataArgs",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "name",
            "docs": [
              "The name of the asset"
            ],
            "type": "string"
          },
          {
            "name": "symbol",
            "docs": [
              "The symbol for the asset"
            ],
            "type": "string"
          },
          {
            "name": "uri",
            "docs": [
              "URI pointing to JSON representing the asset"
            ],
            "type": "string"
          },
          {
            "name": "sellerFeeBasisPoints",
            "docs": [
              "Royalty basis points that goes to creators in secondary sales (0-10000)"
            ],
            "type": "u16"
          },
          {
            "name": "creators",
            "docs": [
              "Array of creators, optional"
            ],
            "type": {
              "option": {
                "vec": {
                  "defined": "Creator"
                }
              }
            }
          }
        ]
      }
    },
    {
      "name": "NFTAttribute",
      "docs": [
        "NFT Attribute"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "blockDefinitionIndex",
            "docs": [
              "The block definition"
            ],
            "type": "u16"
          },
          {
            "name": "mint",
            "docs": [
              "The token mint associated with this attribute"
            ],
            "type": "publicKey"
          },
          {
            "name": "order",
            "docs": [
              "The order this attribute is to be place on"
            ],
            "type": "u8"
          },
          {
            "name": "attributeName",
            "docs": [
              "Attribute name"
            ],
            "type": "string"
          },
          {
            "name": "attributeValue",
            "docs": [
              "Attribute value"
            ],
            "type": {
              "defined": "NFTAttributeValue"
            }
          }
        ]
      }
    },
    {
      "name": "Creator",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "address",
            "type": "publicKey"
          },
          {
            "name": "verified",
            "type": "bool"
          },
          {
            "name": "share",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "AssemblingAction",
      "docs": [
        "Assembling Action"
      ],
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Burn"
          },
          {
            "name": "Freeze"
          },
          {
            "name": "TakeCustody"
          }
        ]
      }
    },
    {
      "name": "BlockType",
      "docs": [
        "Block types"
      ],
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Enum"
          },
          {
            "name": "Boolean"
          },
          {
            "name": "Random"
          },
          {
            "name": "Computed"
          }
        ]
      }
    },
    {
      "name": "BlockDefinitionValue",
      "docs": [
        "Block Definition Value"
      ],
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Enum",
            "fields": [
              {
                "name": "is_collection",
                "type": "bool"
              },
              {
                "name": "value",
                "type": "string"
              },
              {
                "name": "image",
                "type": {
                  "option": "string"
                }
              }
            ]
          },
          {
            "name": "Boolean",
            "fields": [
              {
                "name": "value",
                "type": "bool"
              }
            ]
          },
          {
            "name": "Number",
            "fields": [
              {
                "name": "min",
                "type": "u64"
              },
              {
                "name": "max",
                "type": "u64"
              }
            ]
          }
        ]
      }
    },
    {
      "name": "NFTAttributeValue",
      "docs": [
        "NFT Attribute Value"
      ],
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "String",
            "fields": [
              {
                "name": "value",
                "type": "string"
              }
            ]
          },
          {
            "name": "Boolean",
            "fields": [
              {
                "name": "value",
                "type": "bool"
              }
            ]
          },
          {
            "name": "Number",
            "fields": [
              {
                "name": "value",
                "type": "u64"
              }
            ]
          }
        ]
      }
    },
    {
      "name": "DelegateAuthorityPermission",
      "docs": [
        "Delegate Authority Permission"
      ],
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Master"
          },
          {
            "name": "UpdateAssembler"
          },
          {
            "name": "UpdateBlock"
          },
          {
            "name": "UpdateBlockDefinition"
          },
          {
            "name": "UpdateNFT"
          },
          {
            "name": "InitialArtGeneration"
          }
        ]
      }
    },
    {
      "name": "TokenStandard",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "NonFungible"
          },
          {
            "name": "ProgrammableNonFungible"
          }
        ]
      }
    }
  ],
  "errors": [
    {
      "code": 6000,
      "name": "Overflow",
      "msg": "Opertaion overflowed"
    },
    {
      "code": 6001,
      "name": "Unauthorized",
      "msg": "The provided authority or delegate authority is not valid"
    },
    {
      "code": 6002,
      "name": "BlockTypeMismatch",
      "msg": "The type of block is not same as the block definition value provided"
    },
    {
      "code": 6003,
      "name": "RequiredBlockImage",
      "msg": "The particular block requires an image in definition"
    },
    {
      "code": 6004,
      "name": "InvalidBlockType",
      "msg": "The block has an invalid type"
    },
    {
      "code": 6005,
      "name": "InvalidBlockDefinition",
      "msg": "The block defintion is invalid"
    },
    {
      "code": 6006,
      "name": "InvalidMetadata",
      "msg": "The metadata provided for the mint is not valid"
    },
    {
      "code": 6007,
      "name": "InvalidTokenForBlockDefinition",
      "msg": "The token is not valid for this block definition"
    },
    {
      "code": 6008,
      "name": "NFTAlreadyMinted",
      "msg": "The NFT is already minted"
    },
    {
      "code": 6009,
      "name": "BlockExistsForNFT",
      "msg": "NFT attribute is already present for this block"
    },
    {
      "code": 6010,
      "name": "BlockDoesNotExistsForNFT",
      "msg": "NFT does not have attribute for this block"
    },
    {
      "code": 6011,
      "name": "InvalidUniqueConstraint",
      "msg": "Unique constraint is not valid"
    },
    {
      "code": 6012,
      "name": "UniqueConstraintNotProvided",
      "msg": "Unique constraint is not provided"
    },
    {
      "code": 6013,
      "name": "DelegateAccountNotProvided",
      "msg": "Delegate is not provided"
    },
    {
      "code": 6014,
      "name": "DepositAccountNotProvided",
      "msg": "Deposit account is not provided"
    },
    {
      "code": 6015,
      "name": "NFTNotMinted",
      "msg": "The NFT is not minted"
    },
    {
      "code": 6016,
      "name": "NFTNotBurnable",
      "msg": "The NFT is cannot be burned"
    },
    {
      "code": 6017,
      "name": "InitialArtGenerated",
      "msg": "The initial generation of art is already complete"
    }
  ]
};

export const IDL: Assembler = {
  "version": "0.1.0",
  "name": "assembler",
  "instructions": [
    {
      "name": "createAssembler",
      "accounts": [
        {
          "name": "collectionMint",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "Collection of the nfts generated by this assembler"
          ]
        },
        {
          "name": "collectionMetadata",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Metadata account of the collection"
          ]
        },
        {
          "name": "collectionMasterEdition",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Master Edition account of the collection"
          ]
        },
        {
          "name": "assembler",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Assembler state account"
          ]
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The wallet that holds the authority over the assembler"
          ]
        },
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The wallet that pays for the rent"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "NATIVE SYSTEM PROGRAM"
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "SPL TOKEN PROGRAM"
          ]
        },
        {
          "name": "tokenMetadataProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "METAPLEX TOKEN METADATA PROGRAM"
          ]
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "SYSVAR RENT"
          ]
        },
        {
          "name": "sysvarInstructions",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "NATIVE Instructions SYSVAR"
          ]
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "CreateAssemblerArgs"
          }
        }
      ]
    },
    {
      "name": "updateAssembler",
      "accounts": [
        {
          "name": "assembler",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Assembler state account"
          ]
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": true,
          "docs": [
            "The wallet that holds the authority over the assembler"
          ]
        },
        {
          "name": "delegate",
          "isMut": false,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "[Optional] the delegate of the assembler"
          ]
        },
        {
          "name": "newAuthority",
          "isMut": false,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "[Optional] The new wallet that will hold the authority over the assembler"
          ]
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "UpdateAssemblerArgs"
          }
        }
      ]
    },
    {
      "name": "createDelegateAuthority",
      "accounts": [
        {
          "name": "assembler",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Assembler state account"
          ]
        },
        {
          "name": "delegateAuthority",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "the delegate authority account"
          ]
        },
        {
          "name": "delegate",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "the wallet that holds delegate authority"
          ]
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": true,
          "docs": [
            "The wallet that holds the authority over the assembler"
          ]
        },
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The wallet that pays for everything"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "NATIVE SYSTEM PROGRAM"
          ]
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "CreateDelegateAuthorityArgs"
          }
        }
      ]
    },
    {
      "name": "createBlock",
      "accounts": [
        {
          "name": "assembler",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Assembler state account"
          ]
        },
        {
          "name": "block",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Block account"
          ]
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": true,
          "docs": [
            "The wallet that holds the authority over the assembler"
          ]
        },
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The wallet that pays for the rent"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "NATIVE SYSTEM PROGRAM"
          ]
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "CreateBlockArgs"
          }
        }
      ]
    },
    {
      "name": "createBlockDefinition",
      "accounts": [
        {
          "name": "assembler",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Assembler state account"
          ]
        },
        {
          "name": "block",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Block account"
          ]
        },
        {
          "name": "blockDefinition",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Block Definition account"
          ]
        },
        {
          "name": "blockDefinitionMint",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Mint of the SFT/Collection"
          ]
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": true,
          "docs": [
            "The wallet that holds the authority over the assembler"
          ]
        },
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The wallet that pays for the rent"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "NATIVE SYSTEM PROGRAM"
          ]
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "BlockDefinitionValue"
          }
        }
      ]
    },
    {
      "name": "createNft",
      "accounts": [
        {
          "name": "assembler",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Assembler state account"
          ]
        },
        {
          "name": "collectionMint",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The collection mint of the assembler"
          ]
        },
        {
          "name": "collectionMetadataAccount",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Metadata account of the collection"
          ]
        },
        {
          "name": "collectionMasterEdition",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Master Edition account of the collection"
          ]
        },
        {
          "name": "nftMint",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "NFT mint account"
          ]
        },
        {
          "name": "nftMetadata",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Metadata account of the NFT"
          ]
        },
        {
          "name": "nftMasterEdition",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Master Edition account of the NFT"
          ]
        },
        {
          "name": "nft",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "NFT account"
          ]
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The wallet that holds the pre mint authority over this NFT"
          ]
        },
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The wallet that pays for the rent"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "NATIVE SYSTEM PROGRAM"
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "SPL TOKEN PROGRAM"
          ]
        },
        {
          "name": "tokenMetadataProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "METAPLEX TOKEN METADATA PROGRAM"
          ]
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "SYSVAR RENT"
          ]
        },
        {
          "name": "sysvarInstructions",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "NATIVE Instructions SYSVAR"
          ]
        }
      ],
      "args": []
    },
    {
      "name": "addBlock",
      "accounts": [
        {
          "name": "assembler",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Assembler state account"
          ]
        },
        {
          "name": "nft",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "NFT account"
          ]
        },
        {
          "name": "block",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Block account"
          ]
        },
        {
          "name": "blockDefinition",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Block definition account"
          ]
        },
        {
          "name": "tokenMint",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Attribute token mint"
          ]
        },
        {
          "name": "tokenAccount",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Attribute token account"
          ]
        },
        {
          "name": "tokenMetadata",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Attribute token metadata"
          ]
        },
        {
          "name": "tokenEdition",
          "isMut": false,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "Attribute token edition"
          ]
        },
        {
          "name": "tokenRecord",
          "isMut": true,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "Attribute token record"
          ]
        },
        {
          "name": "depositAccount",
          "isMut": true,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "The account that will hold the nft sent on expedition"
          ]
        },
        {
          "name": "depositTokenRecord",
          "isMut": true,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "Deposit token_record"
          ]
        },
        {
          "name": "authority",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The wallet that has pre mint authority over this NFT"
          ]
        },
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The wallet that pays for the rent"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "NATIVE SYSTEM PROGRAM"
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "SPL TOKEN PROGRAM"
          ]
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "ASSOCIATED TOKEN PROGRAM"
          ]
        },
        {
          "name": "tokenMetadataProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "METAPLEX TOKEN METADATA PROGRAM"
          ]
        },
        {
          "name": "sysvarInstructions",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "NATIVE Instructions SYSVAR"
          ]
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "SYSVAR RENT"
          ]
        }
      ],
      "args": []
    },
    {
      "name": "mintNft",
      "accounts": [
        {
          "name": "assembler",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Assembler state account"
          ]
        },
        {
          "name": "nft",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "NFT account"
          ]
        },
        {
          "name": "nftMint",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "NFT mint account"
          ]
        },
        {
          "name": "nftMetadata",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Metadata account of the NFT"
          ]
        },
        {
          "name": "nftMasterEdition",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Master Edition account of the NFT"
          ]
        },
        {
          "name": "nftTokenRecord",
          "isMut": true,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "NFT token record"
          ]
        },
        {
          "name": "tokenAccount",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "NFT token account"
          ]
        },
        {
          "name": "uniqueConstraint",
          "isMut": true,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "NFT unique constraint"
          ]
        },
        {
          "name": "authority",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The wallet that has pre mint authority over this NFT"
          ]
        },
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The wallet that pays for the rent"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "NATIVE SYSTEM PROGRAM"
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "SPL TOKEN PROGRAM"
          ]
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "ASSOCIATED TOKEN PROGRAM"
          ]
        },
        {
          "name": "tokenMetadataProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "METAPLEX TOKEN METADATA PROGRAM"
          ]
        },
        {
          "name": "sysvarInstructions",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "NATIVE Instructions SYSVAR"
          ]
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "SYSVAR RENT"
          ]
        }
      ],
      "args": []
    },
    {
      "name": "burnNft",
      "accounts": [
        {
          "name": "assembler",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Assembler state account"
          ]
        },
        {
          "name": "nft",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "NFT account"
          ]
        },
        {
          "name": "nftMint",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "NFT mint account"
          ]
        },
        {
          "name": "nftMetadata",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Metadata account of the NFT"
          ]
        },
        {
          "name": "tokenAccount",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "NFT token account"
          ]
        },
        {
          "name": "uniqueConstraint",
          "isMut": true,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "NFT unique constraint"
          ]
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": true,
          "docs": [
            "The wallet that holds the pre mint authority over this NFT"
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "SPL TOKEN PROGRAM"
          ]
        },
        {
          "name": "tokenMetadataProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "METAPLEX TOKEN METADATA PROGRAM"
          ]
        }
      ],
      "args": []
    },
    {
      "name": "removeBlock",
      "accounts": [
        {
          "name": "assembler",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Assembler state account"
          ]
        },
        {
          "name": "nft",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "NFT account"
          ]
        },
        {
          "name": "block",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Block account"
          ]
        },
        {
          "name": "blockDefinition",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "Block definition account"
          ]
        },
        {
          "name": "tokenMint",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Burning token mint"
          ]
        },
        {
          "name": "tokenAccount",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Burning token account"
          ]
        },
        {
          "name": "tokenMetadata",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Burning token metadata"
          ]
        },
        {
          "name": "tokenEdition",
          "isMut": false,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "Burning token edition"
          ]
        },
        {
          "name": "tokenRecord",
          "isMut": true,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "Attribute token record"
          ]
        },
        {
          "name": "depositAccount",
          "isMut": true,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "The account that will hold the nft sent on expedition"
          ]
        },
        {
          "name": "depositTokenRecord",
          "isMut": true,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "Deposit token_record"
          ]
        },
        {
          "name": "authority",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The wallet that has pre mint authority over this NFT"
          ]
        },
        {
          "name": "payer",
          "isMut": true,
          "isSigner": true,
          "docs": [
            "The wallet that pays for the rent"
          ]
        },
        {
          "name": "systemProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "SYSTEM PROGRAM"
          ]
        },
        {
          "name": "tokenProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "SPL TOKEN PROGRAM"
          ]
        },
        {
          "name": "associatedTokenProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "ASSOCIATED TOKEN PROGRAM"
          ]
        },
        {
          "name": "tokenMetadataProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "METAPLEX TOKEN METADATA PROGRAM"
          ]
        },
        {
          "name": "sysvarInstructions",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "NATIVE Instructions SYSVAR"
          ]
        },
        {
          "name": "rent",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "RENT PROGRAM"
          ]
        }
      ],
      "args": []
    },
    {
      "name": "setNftGenerated",
      "accounts": [
        {
          "name": "assembler",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Assembler state account"
          ]
        },
        {
          "name": "nft",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "The nft account"
          ]
        },
        {
          "name": "nftMetadata",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Metadata account of the NFT"
          ]
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": true,
          "docs": [
            "The wallet that holds the authority to execute this instruction"
          ]
        },
        {
          "name": "delegate",
          "isMut": false,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "[Optional] the delegate of the assembler"
          ]
        },
        {
          "name": "tokenMetadataProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "METAPLEX TOKEN METADATA PROGRAM"
          ]
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "SetNFTGeneratedArgs"
          }
        }
      ]
    },
    {
      "name": "updateMetadata",
      "accounts": [
        {
          "name": "assembler",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Assembler state account"
          ]
        },
        {
          "name": "nft",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "The nft account"
          ]
        },
        {
          "name": "metadata",
          "isMut": true,
          "isSigner": false,
          "docs": [
            "Metadata account of the NFT"
          ]
        },
        {
          "name": "authority",
          "isMut": false,
          "isSigner": true,
          "docs": [
            "The wallet that holds the authority to execute this instruction"
          ]
        },
        {
          "name": "delegate",
          "isMut": false,
          "isSigner": false,
          "isOptional": true,
          "docs": [
            "[Optional] the delegate of the assembler"
          ]
        },
        {
          "name": "tokenMetadataProgram",
          "isMut": false,
          "isSigner": false,
          "docs": [
            "METAPLEX TOKEN METADATA PROGRAM"
          ]
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": "UpdateMetadataArgs"
          }
        }
      ]
    }
  ],
  "accounts": [
    {
      "name": "assembler",
      "docs": [
        "Assembler state account"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "authority",
            "docs": [
              "The wallet that has authority to modify the assembler"
            ],
            "type": "publicKey"
          },
          {
            "name": "collection",
            "docs": [
              "The collection address of the assembler generated NFTs"
            ],
            "type": "publicKey"
          },
          {
            "name": "collectionName",
            "docs": [
              "The collection name to be associated with each nft"
            ],
            "type": "string"
          },
          {
            "name": "collectionSymbol",
            "docs": [
              "The collection symbol to be associated with each nft"
            ],
            "type": "string"
          },
          {
            "name": "collectionDescription",
            "docs": [
              "The collection description to be associated with each nft"
            ],
            "type": "string"
          },
          {
            "name": "nftBaseUri",
            "docs": [
              "The base uri of each nft metadata"
            ],
            "type": "string"
          },
          {
            "name": "assemblingAction",
            "docs": [
              "Action to take for the block SFT while assembling"
            ],
            "type": {
              "defined": "AssemblingAction"
            }
          },
          {
            "name": "nfts",
            "docs": [
              "The number of NFTs created by this assembler"
            ],
            "type": "u16"
          },
          {
            "name": "allowDuplicates",
            "docs": [
              "Should this assembler allow duplicate NFTs"
            ],
            "type": "bool"
          },
          {
            "name": "defaultRoyalty",
            "docs": [
              "Default royalty percentage"
            ],
            "type": "u16"
          },
          {
            "name": "tokenStandard",
            "docs": [
              "Token Standard"
            ],
            "type": {
              "defined": "TokenStandard"
            }
          },
          {
            "name": "ruleSet",
            "docs": [
              "pNFT rule set"
            ],
            "type": {
              "option": "publicKey"
            }
          },
          {
            "name": "defaultCreators",
            "docs": [
              "Default creators"
            ],
            "type": {
              "vec": {
                "defined": "Creator"
              }
            }
          }
        ]
      }
    },
    {
      "name": "block",
      "docs": [
        "Block account"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "assembler",
            "docs": [
              "The assembler this block is associated to"
            ],
            "type": "publicKey"
          },
          {
            "name": "blockOrder",
            "docs": [
              "The order of the block in layers"
            ],
            "type": "u8"
          },
          {
            "name": "isGraphical",
            "docs": [
              "Is there a image for this block"
            ],
            "type": "bool"
          },
          {
            "name": "blockType",
            "docs": [
              "The type of the block/trait_type"
            ],
            "type": {
              "defined": "BlockType"
            }
          },
          {
            "name": "blockName",
            "docs": [
              "The name of the block"
            ],
            "type": "string"
          },
          {
            "name": "blockDefinationCounts",
            "docs": [
              "The name of the block"
            ],
            "type": "u16"
          }
        ]
      }
    },
    {
      "name": "blockDefinition",
      "docs": [
        "Block Definition Account"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "block",
            "docs": [
              "The block this definition is associated to"
            ],
            "type": "publicKey"
          },
          {
            "name": "mint",
            "docs": [
              "The mint address of the block definition"
            ],
            "type": "publicKey"
          },
          {
            "name": "value",
            "docs": [
              "The value of the block definition"
            ],
            "type": {
              "defined": "BlockDefinitionValue"
            }
          },
          {
            "name": "definationIndex",
            "type": "u16"
          }
        ]
      }
    },
    {
      "name": "nft",
      "docs": [
        "NFT state account"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "assembler",
            "docs": [
              "The assembler this NFT is associated to"
            ],
            "type": "publicKey"
          },
          {
            "name": "authority",
            "docs": [
              "The wallet that has pre mint authority over this NFT"
            ],
            "type": "publicKey"
          },
          {
            "name": "collectionAddress",
            "docs": [
              "The collection address of this NFT"
            ],
            "type": "publicKey"
          },
          {
            "name": "mint",
            "docs": [
              "The mint address of this NFT"
            ],
            "type": "publicKey"
          },
          {
            "name": "name",
            "docs": [
              "The name of the NFT"
            ],
            "type": "string"
          },
          {
            "name": "symbol",
            "docs": [
              "The symbol of the NFT"
            ],
            "type": "string"
          },
          {
            "name": "description",
            "docs": [
              "The description of the NFT"
            ],
            "type": "string"
          },
          {
            "name": "minted",
            "docs": [
              "Flag if this NFT is minted"
            ],
            "type": "bool"
          },
          {
            "name": "id",
            "docs": [
              "The id of the NFT"
            ],
            "type": "u16"
          },
          {
            "name": "uri",
            "docs": [
              "The uri of the NFT"
            ],
            "type": "string"
          },
          {
            "name": "isGenerated",
            "docs": [
              "Flag if the image for this nft is already generated"
            ],
            "type": "bool"
          },
          {
            "name": "attributes",
            "docs": [
              "NFT Attributes"
            ],
            "type": {
              "vec": {
                "defined": "NFTAttribute"
              }
            }
          }
        ]
      }
    },
    {
      "name": "nftUniqueConstraint",
      "docs": [
        "NFT Unique Constraint account"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "nft",
            "docs": [
              "The NFT this constraint is associated to"
            ],
            "type": "publicKey"
          }
        ]
      }
    },
    {
      "name": "delegateAuthority",
      "docs": [
        "Delegate Authority"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "authority",
            "docs": [
              "The delegate authority"
            ],
            "type": "publicKey"
          },
          {
            "name": "permission",
            "docs": [
              "The permission of the delegate authority"
            ],
            "type": {
              "defined": "DelegateAuthorityPermission"
            }
          }
        ]
      }
    }
  ],
  "types": [
    {
      "name": "CreateAssemblerArgs",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "assemblingAction",
            "type": {
              "defined": "AssemblingAction"
            }
          },
          {
            "name": "collectionName",
            "type": "string"
          },
          {
            "name": "collectionSymbol",
            "type": "string"
          },
          {
            "name": "collectionUri",
            "type": "string"
          },
          {
            "name": "collectionDescription",
            "type": "string"
          },
          {
            "name": "nftBaseUri",
            "type": "string"
          },
          {
            "name": "allowDuplicates",
            "type": {
              "option": "bool"
            }
          },
          {
            "name": "defaultRoyalty",
            "type": {
              "option": "u16"
            }
          },
          {
            "name": "tokenStandard",
            "type": {
              "option": {
                "defined": "TokenStandard"
              }
            }
          },
          {
            "name": "ruleSet",
            "type": {
              "option": "publicKey"
            }
          },
          {
            "name": "defaultCreators",
            "type": {
              "vec": {
                "defined": "Creator"
              }
            }
          }
        ]
      }
    },
    {
      "name": "UpdateAssemblerArgs",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "assemblingAction",
            "type": {
              "defined": "AssemblingAction"
            }
          },
          {
            "name": "nftBaseUri",
            "type": "string"
          },
          {
            "name": "allowDuplicates",
            "type": {
              "option": "bool"
            }
          },
          {
            "name": "defaultRoyalty",
            "type": {
              "option": "u16"
            }
          }
        ]
      }
    },
    {
      "name": "CreateDelegateAuthorityArgs",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "permission",
            "type": {
              "defined": "DelegateAuthorityPermission"
            }
          }
        ]
      }
    },
    {
      "name": "CreateBlockArgs",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "blockOrder",
            "type": "u8"
          },
          {
            "name": "isGraphical",
            "type": "bool"
          },
          {
            "name": "blockType",
            "type": {
              "defined": "BlockType"
            }
          },
          {
            "name": "blockName",
            "type": "string"
          }
        ]
      }
    },
    {
      "name": "SetNFTGeneratedArgs",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "newUri",
            "type": {
              "option": "string"
            }
          }
        ]
      }
    },
    {
      "name": "UpdateMetadataArgs",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "name",
            "docs": [
              "The name of the asset"
            ],
            "type": "string"
          },
          {
            "name": "symbol",
            "docs": [
              "The symbol for the asset"
            ],
            "type": "string"
          },
          {
            "name": "uri",
            "docs": [
              "URI pointing to JSON representing the asset"
            ],
            "type": "string"
          },
          {
            "name": "sellerFeeBasisPoints",
            "docs": [
              "Royalty basis points that goes to creators in secondary sales (0-10000)"
            ],
            "type": "u16"
          },
          {
            "name": "creators",
            "docs": [
              "Array of creators, optional"
            ],
            "type": {
              "option": {
                "vec": {
                  "defined": "Creator"
                }
              }
            }
          }
        ]
      }
    },
    {
      "name": "NFTAttribute",
      "docs": [
        "NFT Attribute"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "blockDefinitionIndex",
            "docs": [
              "The block definition"
            ],
            "type": "u16"
          },
          {
            "name": "mint",
            "docs": [
              "The token mint associated with this attribute"
            ],
            "type": "publicKey"
          },
          {
            "name": "order",
            "docs": [
              "The order this attribute is to be place on"
            ],
            "type": "u8"
          },
          {
            "name": "attributeName",
            "docs": [
              "Attribute name"
            ],
            "type": "string"
          },
          {
            "name": "attributeValue",
            "docs": [
              "Attribute value"
            ],
            "type": {
              "defined": "NFTAttributeValue"
            }
          }
        ]
      }
    },
    {
      "name": "Creator",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "address",
            "type": "publicKey"
          },
          {
            "name": "verified",
            "type": "bool"
          },
          {
            "name": "share",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "AssemblingAction",
      "docs": [
        "Assembling Action"
      ],
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Burn"
          },
          {
            "name": "Freeze"
          },
          {
            "name": "TakeCustody"
          }
        ]
      }
    },
    {
      "name": "BlockType",
      "docs": [
        "Block types"
      ],
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Enum"
          },
          {
            "name": "Boolean"
          },
          {
            "name": "Random"
          },
          {
            "name": "Computed"
          }
        ]
      }
    },
    {
      "name": "BlockDefinitionValue",
      "docs": [
        "Block Definition Value"
      ],
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Enum",
            "fields": [
              {
                "name": "is_collection",
                "type": "bool"
              },
              {
                "name": "value",
                "type": "string"
              },
              {
                "name": "image",
                "type": {
                  "option": "string"
                }
              }
            ]
          },
          {
            "name": "Boolean",
            "fields": [
              {
                "name": "value",
                "type": "bool"
              }
            ]
          },
          {
            "name": "Number",
            "fields": [
              {
                "name": "min",
                "type": "u64"
              },
              {
                "name": "max",
                "type": "u64"
              }
            ]
          }
        ]
      }
    },
    {
      "name": "NFTAttributeValue",
      "docs": [
        "NFT Attribute Value"
      ],
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "String",
            "fields": [
              {
                "name": "value",
                "type": "string"
              }
            ]
          },
          {
            "name": "Boolean",
            "fields": [
              {
                "name": "value",
                "type": "bool"
              }
            ]
          },
          {
            "name": "Number",
            "fields": [
              {
                "name": "value",
                "type": "u64"
              }
            ]
          }
        ]
      }
    },
    {
      "name": "DelegateAuthorityPermission",
      "docs": [
        "Delegate Authority Permission"
      ],
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Master"
          },
          {
            "name": "UpdateAssembler"
          },
          {
            "name": "UpdateBlock"
          },
          {
            "name": "UpdateBlockDefinition"
          },
          {
            "name": "UpdateNFT"
          },
          {
            "name": "InitialArtGeneration"
          }
        ]
      }
    },
    {
      "name": "TokenStandard",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "NonFungible"
          },
          {
            "name": "ProgrammableNonFungible"
          }
        ]
      }
    }
  ],
  "errors": [
    {
      "code": 6000,
      "name": "Overflow",
      "msg": "Opertaion overflowed"
    },
    {
      "code": 6001,
      "name": "Unauthorized",
      "msg": "The provided authority or delegate authority is not valid"
    },
    {
      "code": 6002,
      "name": "BlockTypeMismatch",
      "msg": "The type of block is not same as the block definition value provided"
    },
    {
      "code": 6003,
      "name": "RequiredBlockImage",
      "msg": "The particular block requires an image in definition"
    },
    {
      "code": 6004,
      "name": "InvalidBlockType",
      "msg": "The block has an invalid type"
    },
    {
      "code": 6005,
      "name": "InvalidBlockDefinition",
      "msg": "The block defintion is invalid"
    },
    {
      "code": 6006,
      "name": "InvalidMetadata",
      "msg": "The metadata provided for the mint is not valid"
    },
    {
      "code": 6007,
      "name": "InvalidTokenForBlockDefinition",
      "msg": "The token is not valid for this block definition"
    },
    {
      "code": 6008,
      "name": "NFTAlreadyMinted",
      "msg": "The NFT is already minted"
    },
    {
      "code": 6009,
      "name": "BlockExistsForNFT",
      "msg": "NFT attribute is already present for this block"
    },
    {
      "code": 6010,
      "name": "BlockDoesNotExistsForNFT",
      "msg": "NFT does not have attribute for this block"
    },
    {
      "code": 6011,
      "name": "InvalidUniqueConstraint",
      "msg": "Unique constraint is not valid"
    },
    {
      "code": 6012,
      "name": "UniqueConstraintNotProvided",
      "msg": "Unique constraint is not provided"
    },
    {
      "code": 6013,
      "name": "DelegateAccountNotProvided",
      "msg": "Delegate is not provided"
    },
    {
      "code": 6014,
      "name": "DepositAccountNotProvided",
      "msg": "Deposit account is not provided"
    },
    {
      "code": 6015,
      "name": "NFTNotMinted",
      "msg": "The NFT is not minted"
    },
    {
      "code": 6016,
      "name": "NFTNotBurnable",
      "msg": "The NFT is cannot be burned"
    },
    {
      "code": 6017,
      "name": "InitialArtGenerated",
      "msg": "The initial generation of art is already complete"
    }
  ]
};
