/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  CreateBlockDefinitionNumberArgs,
  createBlockDefinitionNumberArgsBeet,
} from '../types/CreateBlockDefinitionNumberArgs'

/**
 * @category Instructions
 * @category CreateBlockDefinitionNumber
 * @category generated
 */
export type CreateBlockDefinitionNumberInstructionArgs = {
  args: CreateBlockDefinitionNumberArgs
}
/**
 * @category Instructions
 * @category CreateBlockDefinitionNumber
 * @category generated
 */
export const createBlockDefinitionNumberStruct = new beet.BeetArgsStruct<
  CreateBlockDefinitionNumberInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', createBlockDefinitionNumberArgsBeet],
  ],
  'CreateBlockDefinitionNumberInstructionArgs'
)
/**
 * Accounts required by the _createBlockDefinitionNumber_ instruction
 *
 * @property [] assembler
 * @property [] block
 * @property [_writable_] blockDefinition
 * @property [**signer**] authority
 * @property [_writable_, **signer**] payer
 * @category Instructions
 * @category CreateBlockDefinitionNumber
 * @category generated
 */
export type CreateBlockDefinitionNumberInstructionAccounts = {
  assembler: web3.PublicKey
  block: web3.PublicKey
  blockDefinition: web3.PublicKey
  authority: web3.PublicKey
  payer: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createBlockDefinitionNumberInstructionDiscriminator = [
  174, 167, 10, 249, 187, 83, 86, 243,
]

/**
 * Creates a _CreateBlockDefinitionNumber_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateBlockDefinitionNumber
 * @category generated
 */
export function createCreateBlockDefinitionNumberInstruction(
  accounts: CreateBlockDefinitionNumberInstructionAccounts,
  args: CreateBlockDefinitionNumberInstructionArgs,
  programId = new web3.PublicKey('AXX2agYcoDwGFsgEWvSitqfGH4ooKXUqK5P7Ch9raDJT')
) {
  const [data] = createBlockDefinitionNumberStruct.serialize({
    instructionDiscriminator:
      createBlockDefinitionNumberInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.assembler,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.block,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.blockDefinition,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
