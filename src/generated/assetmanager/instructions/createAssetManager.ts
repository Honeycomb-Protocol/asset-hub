/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  CreateAssetManagerArgs,
  createAssetManagerArgsBeet,
} from '../types/CreateAssetManagerArgs'

/**
 * @category Instructions
 * @category CreateAssetManager
 * @category generated
 */
export type CreateAssetManagerInstructionArgs = {
  args: CreateAssetManagerArgs
}
/**
 * @category Instructions
 * @category CreateAssetManager
 * @category generated
 */
export const createAssetManagerStruct = new beet.FixableBeetArgsStruct<
  CreateAssetManagerInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', createAssetManagerArgsBeet],
  ],
  'CreateAssetManagerInstructionArgs'
)
/**
 * Accounts required by the _createAssetManager_ instruction
 *
 * @property [] key
 * @property [_writable_] assetManager
 * @property [] treasury
 * @property [] authority
 * @property [_writable_, **signer**] payer
 * @category Instructions
 * @category CreateAssetManager
 * @category generated
 */
export type CreateAssetManagerInstructionAccounts = {
  key: web3.PublicKey
  assetManager: web3.PublicKey
  treasury: web3.PublicKey
  authority: web3.PublicKey
  payer: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createAssetManagerInstructionDiscriminator = [
  30, 237, 255, 50, 68, 210, 20, 30,
]

/**
 * Creates a _CreateAssetManager_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateAssetManager
 * @category generated
 */
export function createCreateAssetManagerInstruction(
  accounts: CreateAssetManagerInstructionAccounts,
  args: CreateAssetManagerInstructionArgs,
  programId = new web3.PublicKey('BNGKUeQQHw2MgZc9EqFsCWmnkLEKLCUfu5cw9YFWK3hF')
) {
  const [data] = createAssetManagerStruct.serialize({
    instructionDiscriminator: createAssetManagerInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.key,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.assetManager,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.treasury,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
