/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from "@metaplex-foundation/beet";
/**
 * This type is used to derive the {@link Conditionalbool} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link Conditionalbool} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type ConditionalboolRecord = {
  None: void /* scalar variant */;
  Item: { fields: [boolean] };
  Or: { fields: [Conditionalbool[]] };
  And: { fields: [Conditionalbool[]] };
};

/**
 * Union type respresenting the Conditionalbool data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isConditionalbool*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type Conditionalbool = beet.DataEnumKeyAsKind<ConditionalboolRecord>;

export const isConditionalboolNone = (
  x: Conditionalbool
): x is Conditionalbool & { __kind: "None" } => x.__kind === "None";
export const isConditionalboolItem = (
  x: Conditionalbool
): x is Conditionalbool & { __kind: "Item" } => x.__kind === "Item";
export const isConditionalboolOr = (
  x: Conditionalbool
): x is Conditionalbool & { __kind: "Or" } => x.__kind === "Or";
export const isConditionalboolAnd = (
  x: Conditionalbool
): x is Conditionalbool & { __kind: "And" } => x.__kind === "And";

const variants: beet.DataEnumBeet<
  ConditionalboolRecord,
  keyof ConditionalboolRecord
>[] = [
  ["None", beet.unit],
  [
    "Item",
    new beet.BeetArgsStruct<ConditionalboolRecord["Item"]>(
      [["fields", beet.fixedSizeTuple([beet.bool])]],
      'ConditionalboolRecord["Item"]'
    ),
  ],
];

/**
 * @category userTypes
 * @category generated
 */
export const conditionalboolBeet = beet.dataEnum<ConditionalboolRecord>(
  variants
) as beet.FixableBeet<Conditionalbool, Conditionalbool>;

variants.push(
  [
    "Or",
    new beet.FixableBeetArgsStruct<ConditionalboolRecord["Or"]>(
      [["fields", beet.tuple([beet.array(conditionalboolBeet)])]],
      'ConditionalboolRecord["Or"]'
    ),
  ],
  [
    "And",
    new beet.FixableBeetArgsStruct<ConditionalboolRecord["And"]>(
      [["fields", beet.tuple([beet.array(conditionalboolBeet)])]],
      'ConditionalboolRecord["And"]'
    ),
  ]
);
