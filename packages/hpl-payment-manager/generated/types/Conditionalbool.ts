/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from "@metaplex-foundation/beet";
/**
 * This type is used to derive the {@link ConditionalBool} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link ConditionalBool} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type ConditionalBoolRecord = {
  None: void /* scalar variant */;
  Item: { fields: [boolean] };
  Or: { fields: [ConditionalBool[]] };
  And: { fields: [ConditionalBool[]] };
};

/**
 * Union type respresenting the ConditionalBool data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isConditionalBool*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type ConditionalBool = beet.DataEnumKeyAsKind<ConditionalBoolRecord>;

export const isConditionalBoolNone = (
  x: ConditionalBool
): x is ConditionalBool & { __kind: "None" } => x.__kind === "None";
export const isConditionalBoolItem = (
  x: ConditionalBool
): x is ConditionalBool & { __kind: "Item" } => x.__kind === "Item";
export const isConditionalBoolOr = (
  x: ConditionalBool
): x is ConditionalBool & { __kind: "Or" } => x.__kind === "Or";
export const isConditionalBoolAnd = (
  x: ConditionalBool
): x is ConditionalBool & { __kind: "And" } => x.__kind === "And";

const variants: beet.DataEnumBeet<
  ConditionalBoolRecord,
  keyof ConditionalBoolRecord
>[] = [
  ["None", beet.unit],
  [
    "Item",
    new beet.BeetArgsStruct<ConditionalBoolRecord["Item"]>(
      [["fields", beet.fixedSizeTuple([beet.bool])]],
      'ConditionalBoolRecord["Item"]'
    ),
  ],
];

/**
 * @category userTypes
 * @category generated
 */
export const conditionalBoolBeet = beet.dataEnum<ConditionalBoolRecord>(
  variants
) as beet.FixableBeet<ConditionalBool, ConditionalBool>;

variants.push(
  [
    "Or",
    new beet.FixableBeetArgsStruct<ConditionalBoolRecord["Or"]>(
      [["fields", beet.tuple([beet.array(conditionalBoolBeet)])]],
      'ConditionalBoolRecord["Or"]'
    ),
  ],
  [
    "And",
    new beet.FixableBeetArgsStruct<ConditionalBoolRecord["And"]>(
      [["fields", beet.tuple([beet.array(conditionalBoolBeet)])]],
      'ConditionalBoolRecord["And"]'
    ),
  ]
);
