/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
/**
 * This type is used to derive the {@link NftPayment} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link NftPayment} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type NftPaymentRecord = {
  Mint: { fields: [web3.PublicKey] }
  Creator: { fields: [web3.PublicKey] }
  Collection: { fields: [web3.PublicKey] }
  Tree: { fields: [web3.PublicKey] }
}

/**
 * Union type respresenting the NftPayment data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isNftPayment*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type NftPayment = beet.DataEnumKeyAsKind<NftPaymentRecord>

export const isNftPaymentMint = (
  x: NftPayment
): x is NftPayment & { __kind: 'Mint' } => x.__kind === 'Mint'
export const isNftPaymentCreator = (
  x: NftPayment
): x is NftPayment & { __kind: 'Creator' } => x.__kind === 'Creator'
export const isNftPaymentCollection = (
  x: NftPayment
): x is NftPayment & { __kind: 'Collection' } => x.__kind === 'Collection'
export const isNftPaymentTree = (
  x: NftPayment
): x is NftPayment & { __kind: 'Tree' } => x.__kind === 'Tree'

/**
 * @category userTypes
 * @category generated
 */
export const nftPaymentBeet = beet.dataEnum<NftPaymentRecord>([
  [
    'Mint',
    new beet.BeetArgsStruct<NftPaymentRecord['Mint']>(
      [['fields', beet.fixedSizeTuple([beetSolana.publicKey])]],
      'NftPaymentRecord["Mint"]'
    ),
  ],
  [
    'Creator',
    new beet.BeetArgsStruct<NftPaymentRecord['Creator']>(
      [['fields', beet.fixedSizeTuple([beetSolana.publicKey])]],
      'NftPaymentRecord["Creator"]'
    ),
  ],
  [
    'Collection',
    new beet.BeetArgsStruct<NftPaymentRecord['Collection']>(
      [['fields', beet.fixedSizeTuple([beetSolana.publicKey])]],
      'NftPaymentRecord["Collection"]'
    ),
  ],
  [
    'Tree',
    new beet.BeetArgsStruct<NftPaymentRecord['Tree']>(
      [['fields', beet.fixedSizeTuple([beetSolana.publicKey])]],
      'NftPaymentRecord["Tree"]'
    ),
  ],
]) as beet.FixableBeet<NftPayment, NftPayment>
