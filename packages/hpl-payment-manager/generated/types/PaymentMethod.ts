/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
/**
 * This type is used to derive the {@link PaymentMethod} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link PaymentMethod} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type PaymentMethodRecord = {
  Burn: void /* scalar variant */
  Transfer: { fields: [web3.PublicKey] }
}

/**
 * Union type respresenting the PaymentMethod data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isPaymentMethod*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type PaymentMethod = beet.DataEnumKeyAsKind<PaymentMethodRecord>

export const isPaymentMethodBurn = (
  x: PaymentMethod
): x is PaymentMethod & { __kind: 'Burn' } => x.__kind === 'Burn'
export const isPaymentMethodTransfer = (
  x: PaymentMethod
): x is PaymentMethod & { __kind: 'Transfer' } => x.__kind === 'Transfer'

/**
 * @category userTypes
 * @category generated
 */
export const paymentMethodBeet = beet.dataEnum<PaymentMethodRecord>([
  ['Burn', beet.unit],
  [
    'Transfer',
    new beet.BeetArgsStruct<PaymentMethodRecord['Transfer']>(
      [['fields', beet.fixedSizeTuple([beetSolana.publicKey])]],
      'PaymentMethodRecord["Transfer"]'
    ),
  ],
]) as beet.FixableBeet<PaymentMethod, PaymentMethod>
