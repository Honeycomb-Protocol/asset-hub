/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from "@metaplex-foundation/beet";
import { Payment, paymentBeet } from "./Payment";

/**
 * This type is used to derive the {@link ConditionalPayment} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link ConditionalPayment} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type ConditionalPaymentRecord = {
  None: void /* scalar variant */;
  Item: { fields: [Payment] };
  Or: { fields: [ConditionalPayment[]] };
  And: { fields: [ConditionalPayment[]] };
};

/**
 * Union type respresenting the ConditionalPayment data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isConditionalPayment*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type ConditionalPayment =
  beet.DataEnumKeyAsKind<ConditionalPaymentRecord>;

export const isConditionalPaymentNone = (
  x: ConditionalPayment
): x is ConditionalPayment & { __kind: "None" } => x.__kind === "None";
export const isConditionalPaymentItem = (
  x: ConditionalPayment
): x is ConditionalPayment & { __kind: "Item" } => x.__kind === "Item";
export const isConditionalPaymentOr = (
  x: ConditionalPayment
): x is ConditionalPayment & { __kind: "Or" } => x.__kind === "Or";
export const isConditionalPaymentAnd = (
  x: ConditionalPayment
): x is ConditionalPayment & { __kind: "And" } => x.__kind === "And";

const enumVariants: beet.DataEnumBeet<
  ConditionalPaymentRecord,
  keyof ConditionalPaymentRecord
>[] = [
  ["None", beet.unit],
  [
    "Item",
    new beet.FixableBeetArgsStruct<ConditionalPaymentRecord["Item"]>(
      [["fields", beet.tuple([paymentBeet])]],
      'ConditionalPaymentRecord["Item"]'
    ),
  ],
];

/**
 * @category userTypes
 * @category generated
 */
export const conditionalPaymentBeet = beet.dataEnum<ConditionalPaymentRecord>(
  enumVariants
) as beet.FixableBeet<ConditionalPayment, ConditionalPayment>;

enumVariants.push(
  [
    "Or",
    new beet.FixableBeetArgsStruct<ConditionalPaymentRecord["Or"]>(
      [["fields", beet.tuple([beet.array(conditionalPaymentBeet)])]],
      'ConditionalPaymentRecord["Or"]'
    ),
  ],
  [
    "And",
    new beet.FixableBeetArgsStruct<ConditionalPaymentRecord["And"]>(
      [["fields", beet.tuple([beet.array(conditionalPaymentBeet)])]],
      'ConditionalPaymentRecord["And"]'
    ),
  ]
);
