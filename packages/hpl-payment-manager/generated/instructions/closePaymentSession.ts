/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category ClosePaymentSession
 * @category generated
 */
export const closePaymentSessionStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'ClosePaymentSessionInstructionArgs'
)
/**
 * Accounts required by the _closePaymentSession_ instruction
 *
 * @property [_writable_] paymentStructure
 * @property [_writable_] paymentSession
 * @property [_writable_, **signer**] payer
 * @property [] hplEvents
 * @property [] clockSysvar
 * @category Instructions
 * @category ClosePaymentSession
 * @category generated
 */
export type ClosePaymentSessionInstructionAccounts = {
  paymentStructure: web3.PublicKey
  paymentSession: web3.PublicKey
  payer: web3.PublicKey
  hplEvents: web3.PublicKey
  clockSysvar: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const closePaymentSessionInstructionDiscriminator = [
  161, 233, 72, 129, 212, 34, 159, 212,
]

/**
 * Creates a _ClosePaymentSession_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category ClosePaymentSession
 * @category generated
 */
export function createClosePaymentSessionInstruction(
  accounts: ClosePaymentSessionInstructionAccounts,
  programId = new web3.PublicKey('Pay9ZxrVRXjt9Da8qpwqq4yBRvvrfx3STWnKK4FstPr')
) {
  const [data] = closePaymentSessionStruct.serialize({
    instructionDiscriminator: closePaymentSessionInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.paymentStructure,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.paymentSession,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.hplEvents,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.clockSysvar,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
