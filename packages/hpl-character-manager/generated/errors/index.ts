/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * InvalidMetadata: 'Metadata provided for mint is invalid'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMetadataError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'InvalidMetadata'
  constructor() {
    super('Metadata provided for mint is invalid')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidMetadataError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new InvalidMetadataError())
createErrorFromNameLookup.set(
  'InvalidMetadata',
  () => new InvalidMetadataError()
)

/**
 * NoCriteriaMatched: 'Provided metadata didn't match any criteria config for the character model'
 *
 * @category Errors
 * @category generated
 */
export class NoCriteriaMatchedError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'NoCriteriaMatched'
  constructor() {
    super(
      "Provided metadata didn't match any criteria config for the character model"
    )
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NoCriteriaMatchedError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new NoCriteriaMatchedError())
createErrorFromNameLookup.set(
  'NoCriteriaMatched',
  () => new NoCriteriaMatchedError()
)

/**
 * AssetIDMismatch: 'Asset ID provided in context does not match the generated one'
 *
 * @category Errors
 * @category generated
 */
export class AssetIDMismatchError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'AssetIDMismatch'
  constructor() {
    super('Asset ID provided in context does not match the generated one')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AssetIDMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new AssetIDMismatchError())
createErrorFromNameLookup.set(
  'AssetIDMismatch',
  () => new AssetIDMismatchError()
)

/**
 * CustodialAssetSourceNotFound: 'Source not found for the provided asset custody'
 *
 * @category Errors
 * @category generated
 */
export class CustodialAssetSourceNotFoundError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'CustodialAssetSourceNotFound'
  constructor() {
    super('Source not found for the provided asset custody')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CustodialAssetSourceNotFoundError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1773,
  () => new CustodialAssetSourceNotFoundError()
)
createErrorFromNameLookup.set(
  'CustodialAssetSourceNotFound',
  () => new CustodialAssetSourceNotFoundError()
)

/**
 * CharacterInUse: 'Character is currently being used by a service'
 *
 * @category Errors
 * @category generated
 */
export class CharacterInUseError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'CharacterInUse'
  constructor() {
    super('Character is currently being used by a service')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, CharacterInUseError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new CharacterInUseError())
createErrorFromNameLookup.set('CharacterInUse', () => new CharacterInUseError())

/**
 * MerkleTreeInvalid: 'Merkle tree provided does not belong to this model'
 *
 * @category Errors
 * @category generated
 */
export class MerkleTreeInvalidError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'MerkleTreeInvalid'
  constructor() {
    super('Merkle tree provided does not belong to this model')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MerkleTreeInvalidError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new MerkleTreeInvalidError())
createErrorFromNameLookup.set(
  'MerkleTreeInvalid',
  () => new MerkleTreeInvalidError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
