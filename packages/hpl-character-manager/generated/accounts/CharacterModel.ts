/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { CharacterConfig, characterConfigBeet } from '../types/CharacterConfig'
import { Schema, schemaBeet } from '../types/Schema'
import {
  ControlledMerkleTrees,
  controlledMerkleTreesBeet,
} from '../types/ControlledMerkleTrees'

/**
 * Arguments used to create {@link CharacterModel}
 * @category Accounts
 * @category generated
 */
export type CharacterModelArgs = {
  bump: number
  key: web3.PublicKey
  project: web3.PublicKey
  config: CharacterConfig
  attributes: Schema
  merkleTrees: ControlledMerkleTrees
}

export const characterModelDiscriminator = [48, 232, 95, 182, 18, 16, 71, 113]
/**
 * Holds the data for the {@link CharacterModel} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class CharacterModel implements CharacterModelArgs {
  private constructor(
    readonly bump: number,
    readonly key: web3.PublicKey,
    readonly project: web3.PublicKey,
    readonly config: CharacterConfig,
    readonly attributes: Schema,
    readonly merkleTrees: ControlledMerkleTrees
  ) {}

  /**
   * Creates a {@link CharacterModel} instance from the provided args.
   */
  static fromArgs(args: CharacterModelArgs) {
    return new CharacterModel(
      args.bump,
      args.key,
      args.project,
      args.config,
      args.attributes,
      args.merkleTrees
    )
  }

  /**
   * Deserializes the {@link CharacterModel} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [CharacterModel, number] {
    return CharacterModel.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link CharacterModel} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<CharacterModel> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find CharacterModel account at ${address}`)
    }
    return CharacterModel.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      '4AZpzJtYZCu9yWrnK1D5W23VXHLgN1GPkL8h8CfaGBTW'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, characterModelBeet)
  }

  /**
   * Deserializes the {@link CharacterModel} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [CharacterModel, number] {
    return characterModelBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link CharacterModel} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return characterModelBeet.serialize({
      accountDiscriminator: characterModelDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link CharacterModel} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: CharacterModelArgs) {
    const instance = CharacterModel.fromArgs(args)
    return characterModelBeet.toFixedFromValue({
      accountDiscriminator: characterModelDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link CharacterModel} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: CharacterModelArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      CharacterModel.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link CharacterModel} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      bump: this.bump,
      key: this.key.toBase58(),
      project: this.project.toBase58(),
      config: this.config.__kind,
      attributes: this.attributes.__kind,
      merkleTrees: this.merkleTrees,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const characterModelBeet = new beet.FixableBeetStruct<
  CharacterModel,
  CharacterModelArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['bump', beet.u8],
    ['key', beetSolana.publicKey],
    ['project', beetSolana.publicKey],
    ['config', characterConfigBeet],
    ['attributes', schemaBeet],
    ['merkleTrees', controlledMerkleTreesBeet],
  ],
  CharacterModel.fromArgs,
  'CharacterModel'
)
