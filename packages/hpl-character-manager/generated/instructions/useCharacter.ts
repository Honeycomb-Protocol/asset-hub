/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  UseCharacterArgs,
  useCharacterArgsBeet,
} from '../types/UseCharacterArgs'

/**
 * @category Instructions
 * @category UseCharacter
 * @category generated
 */
export type UseCharacterInstructionArgs = {
  args: UseCharacterArgs
}
/**
 * @category Instructions
 * @category UseCharacter
 * @category generated
 */
export const useCharacterStruct = new beet.FixableBeetArgsStruct<
  UseCharacterInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', useCharacterArgsBeet],
  ],
  'UseCharacterInstructionArgs'
)
/**
 * Accounts required by the _useCharacter_ instruction
 *
 * @property [] project
 * @property [] characterModel
 * @property [_writable_] merkleTree
 * @property [_writable_, **signer**] user
 * @property [_writable_, **signer**] owner
 * @property [_writable_] vault
 * @property [] hiveControl
 * @property [] compressionProgram
 * @property [] logWrapper
 * @property [] clock
 * @property [] instructionsSysvar
 * @category Instructions
 * @category UseCharacter
 * @category generated
 */
export type UseCharacterInstructionAccounts = {
  project: web3.PublicKey
  characterModel: web3.PublicKey
  merkleTree: web3.PublicKey
  user: web3.PublicKey
  owner: web3.PublicKey
  vault: web3.PublicKey
  systemProgram?: web3.PublicKey
  hiveControl: web3.PublicKey
  compressionProgram: web3.PublicKey
  logWrapper: web3.PublicKey
  clock: web3.PublicKey
  instructionsSysvar: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const useCharacterInstructionDiscriminator = [
  111, 193, 181, 115, 54, 22, 217, 69,
]

/**
 * Creates a _UseCharacter_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UseCharacter
 * @category generated
 */
export function createUseCharacterInstruction(
  accounts: UseCharacterInstructionAccounts,
  args: UseCharacterInstructionArgs,
  programId = new web3.PublicKey('4AZpzJtYZCu9yWrnK1D5W23VXHLgN1GPkL8h8CfaGBTW')
) {
  const [data] = useCharacterStruct.serialize({
    instructionDiscriminator: useCharacterInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.project,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.characterModel,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.merkleTree,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.user,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.owner,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.vault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.hiveControl,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.compressionProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.logWrapper,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.clock,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.instructionsSysvar,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
