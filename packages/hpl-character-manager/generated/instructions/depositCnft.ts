/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { DepositCnftArgs, depositCnftArgsBeet } from '../types/DepositCnftArgs'

/**
 * @category Instructions
 * @category DepositCnft
 * @category generated
 */
export type DepositCnftInstructionArgs = {
  args: DepositCnftArgs
}
/**
 * @category Instructions
 * @category DepositCnft
 * @category generated
 */
export const depositCnftStruct = new beet.BeetArgsStruct<
  DepositCnftInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', depositCnftArgsBeet],
  ],
  'DepositCnftInstructionArgs'
)
/**
 * Accounts required by the _depositCnft_ instruction
 *
 * @property [] project
 * @property [] characterModel
 * @property [_writable_] assetCustody
 * @property [] assetId
 * @property [] treeAuthority
 * @property [_writable_] merkleTree
 * @property [_writable_, **signer**] wallet
 * @property [_writable_] vault
 * @property [] hiveControl
 * @property [] bubblegum
 * @property [] compressionProgram
 * @property [] logWrapper
 * @property [] clock
 * @property [] instructionsSysvar
 * @category Instructions
 * @category DepositCnft
 * @category generated
 */
export type DepositCnftInstructionAccounts = {
  project: web3.PublicKey
  characterModel: web3.PublicKey
  assetCustody: web3.PublicKey
  assetId: web3.PublicKey
  treeAuthority: web3.PublicKey
  merkleTree: web3.PublicKey
  wallet: web3.PublicKey
  vault: web3.PublicKey
  systemProgram?: web3.PublicKey
  hiveControl: web3.PublicKey
  bubblegum: web3.PublicKey
  compressionProgram: web3.PublicKey
  logWrapper: web3.PublicKey
  clock: web3.PublicKey
  instructionsSysvar: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const depositCnftInstructionDiscriminator = [
  247, 37, 183, 125, 55, 59, 116, 28,
]

/**
 * Creates a _DepositCnft_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category DepositCnft
 * @category generated
 */
export function createDepositCnftInstruction(
  accounts: DepositCnftInstructionAccounts,
  args: DepositCnftInstructionArgs,
  programId = new web3.PublicKey('4AZpzJtYZCu9yWrnK1D5W23VXHLgN1GPkL8h8CfaGBTW')
) {
  const [data] = depositCnftStruct.serialize({
    instructionDiscriminator: depositCnftInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.project,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.characterModel,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.assetCustody,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.assetId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.treeAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.merkleTree,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.wallet,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.vault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.hiveControl,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.bubblegum,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.compressionProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.logWrapper,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.clock,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.instructionsSysvar,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
