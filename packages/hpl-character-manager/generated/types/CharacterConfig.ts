/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import { NftWrapCriteria, nftWrapCriteriaBeet } from './NftWrapCriteria'
/**
 * This type is used to derive the {@link CharacterConfig} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link CharacterConfig} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type CharacterConfigRecord = {
  Wrapped: { fields: [NftWrapCriteria[]] }
}

/**
 * Union type respresenting the CharacterConfig data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isCharacterConfig*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type CharacterConfig = beet.DataEnumKeyAsKind<CharacterConfigRecord>

export const isCharacterConfigWrapped = (
  x: CharacterConfig
): x is CharacterConfig & { __kind: 'Wrapped' } => x.__kind === 'Wrapped'

/**
 * @category userTypes
 * @category generated
 */
export const characterConfigBeet = beet.dataEnum<CharacterConfigRecord>([
  [
    'Wrapped',
    new beet.FixableBeetArgsStruct<CharacterConfigRecord['Wrapped']>(
      [['fields', beet.tuple([beet.array(nftWrapCriteriaBeet)])]],
      'CharacterConfigRecord["Wrapped"]'
    ),
  ],
]) as beet.FixableBeet<CharacterConfig, CharacterConfig>
