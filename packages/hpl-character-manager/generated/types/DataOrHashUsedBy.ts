/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import { CharacterUsedBy, characterUsedByBeet } from './CharacterUsedBy'
/**
 * This type is used to derive the {@link DataOrHashUsedBy} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link DataOrHashUsedBy} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type DataOrHashUsedByRecord = {
  Data: { fields: [CharacterUsedBy] }
  Hash: { fields: [number[] /* size: 32 */] }
}

/**
 * Union type respresenting the DataOrHashUsedBy data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isDataOrHashUsedBy*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type DataOrHashUsedBy = beet.DataEnumKeyAsKind<DataOrHashUsedByRecord>

export const isDataOrHashUsedByData = (
  x: DataOrHashUsedBy
): x is DataOrHashUsedBy & { __kind: 'Data' } => x.__kind === 'Data'
export const isDataOrHashUsedByHash = (
  x: DataOrHashUsedBy
): x is DataOrHashUsedBy & { __kind: 'Hash' } => x.__kind === 'Hash'

/**
 * @category userTypes
 * @category generated
 */
export const dataOrHashUsedByBeet = beet.dataEnum<DataOrHashUsedByRecord>([
  [
    'Data',
    new beet.FixableBeetArgsStruct<DataOrHashUsedByRecord['Data']>(
      [['fields', beet.tuple([characterUsedByBeet])]],
      'DataOrHashUsedByRecord["Data"]'
    ),
  ],
  [
    'Hash',
    new beet.BeetArgsStruct<DataOrHashUsedByRecord['Hash']>(
      [
        [
          'fields',
          beet.fixedSizeTuple([beet.uniformFixedSizeArray(beet.u8, 32)]),
        ],
      ],
      'DataOrHashUsedByRecord["Hash"]'
    ),
  ],
]) as beet.FixableBeet<DataOrHashUsedBy, DataOrHashUsedBy>
