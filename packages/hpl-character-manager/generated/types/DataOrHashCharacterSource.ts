/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import { CharacterSource, characterSourceBeet } from './CharacterSource'
/**
 * This type is used to derive the {@link DataOrHashCharacterSource} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link DataOrHashCharacterSource} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type DataOrHashCharacterSourceRecord = {
  Data: { fields: [CharacterSource] }
  Hash: { fields: [number[] /* size: 32 */] }
}

/**
 * Union type respresenting the DataOrHashCharacterSource data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isDataOrHashCharacterSource*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type DataOrHashCharacterSource =
  beet.DataEnumKeyAsKind<DataOrHashCharacterSourceRecord>

export const isDataOrHashCharacterSourceData = (
  x: DataOrHashCharacterSource
): x is DataOrHashCharacterSource & { __kind: 'Data' } => x.__kind === 'Data'
export const isDataOrHashCharacterSourceHash = (
  x: DataOrHashCharacterSource
): x is DataOrHashCharacterSource & { __kind: 'Hash' } => x.__kind === 'Hash'

/**
 * @category userTypes
 * @category generated
 */
export const dataOrHashCharacterSourceBeet =
  beet.dataEnum<DataOrHashCharacterSourceRecord>([
    [
      'Data',
      new beet.FixableBeetArgsStruct<DataOrHashCharacterSourceRecord['Data']>(
        [['fields', beet.tuple([characterSourceBeet])]],
        'DataOrHashCharacterSourceRecord["Data"]'
      ),
    ],
    [
      'Hash',
      new beet.BeetArgsStruct<DataOrHashCharacterSourceRecord['Hash']>(
        [
          [
            'fields',
            beet.fixedSizeTuple([beet.uniformFixedSizeArray(beet.u8, 32)]),
          ],
        ],
        'DataOrHashCharacterSourceRecord["Hash"]'
      ),
    ],
  ]) as beet.FixableBeet<DataOrHashCharacterSource, DataOrHashCharacterSource>
