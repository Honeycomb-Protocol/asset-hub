/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
/**
 * This type is used to derive the {@link BlockDefinitionValue} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link BlockDefinitionValue} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type BlockDefinitionValueRecord = {
  Enum: { isCollection: boolean; value: string; image: beet.COption<string> }
  Boolean: { value: boolean }
  Number: { min: beet.bignum; max: beet.bignum }
}

/**
 * Union type respresenting the BlockDefinitionValue data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isBlockDefinitionValue*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type BlockDefinitionValue =
  beet.DataEnumKeyAsKind<BlockDefinitionValueRecord>

export const isBlockDefinitionValueEnum = (
  x: BlockDefinitionValue
): x is BlockDefinitionValue & { __kind: 'Enum' } => x.__kind === 'Enum'
export const isBlockDefinitionValueBoolean = (
  x: BlockDefinitionValue
): x is BlockDefinitionValue & { __kind: 'Boolean' } => x.__kind === 'Boolean'
export const isBlockDefinitionValueNumber = (
  x: BlockDefinitionValue
): x is BlockDefinitionValue & { __kind: 'Number' } => x.__kind === 'Number'

/**
 * @category userTypes
 * @category generated
 */
export const blockDefinitionValueBeet =
  beet.dataEnum<BlockDefinitionValueRecord>([
    [
      'Enum',
      new beet.FixableBeetArgsStruct<BlockDefinitionValueRecord['Enum']>(
        [
          ['isCollection', beet.bool],
          ['value', beet.utf8String],
          ['image', beet.coption(beet.utf8String)],
        ],
        'BlockDefinitionValueRecord["Enum"]'
      ),
    ],

    [
      'Boolean',
      new beet.BeetArgsStruct<BlockDefinitionValueRecord['Boolean']>(
        [['value', beet.bool]],
        'BlockDefinitionValueRecord["Boolean"]'
      ),
    ],

    [
      'Number',
      new beet.BeetArgsStruct<BlockDefinitionValueRecord['Number']>(
        [
          ['min', beet.u64],
          ['max', beet.u64],
        ],
        'BlockDefinitionValueRecord["Number"]'
      ),
    ],
  ]) as beet.FixableBeet<BlockDefinitionValue, BlockDefinitionValue>
