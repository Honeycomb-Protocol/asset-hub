/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'
/**
 * This type is used to derive the {@link TxHook} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link TxHook} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type TxHookRecord = {
  User: void /* scalar variant */
  Authority: void /* scalar variant */
  CPIProgram: { programId: web3.PublicKey; data: Uint8Array }
}

/**
 * Union type respresenting the TxHook data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isTxHook*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type TxHook = beet.DataEnumKeyAsKind<TxHookRecord>

export const isTxHookUser = (x: TxHook): x is TxHook & { __kind: 'User' } =>
  x.__kind === 'User'
export const isTxHookAuthority = (
  x: TxHook
): x is TxHook & { __kind: 'Authority' } => x.__kind === 'Authority'
export const isTxHookCPIProgram = (
  x: TxHook
): x is TxHook & { __kind: 'CPIProgram' } => x.__kind === 'CPIProgram'

/**
 * @category userTypes
 * @category generated
 */
export const txHookBeet = beet.dataEnum<TxHookRecord>([
  ['User', beet.unit],
  ['Authority', beet.unit],

  [
    'CPIProgram',
    new beet.FixableBeetArgsStruct<TxHookRecord['CPIProgram']>(
      [
        ['programId', beetSolana.publicKey],
        ['data', beet.bytes],
      ],
      'TxHookRecord["CPIProgram"]'
    ),
  ],
]) as beet.FixableBeet<TxHook, TxHook>
