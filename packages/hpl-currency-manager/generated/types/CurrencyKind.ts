/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import {
  PermissionedCurrencyKind,
  permissionedCurrencyKindBeet,
} from './PermissionedCurrencyKind'
/**
 * This type is used to derive the {@link CurrencyKind} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link CurrencyKind} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type CurrencyKindRecord = {
  Permissioned: { kind: PermissionedCurrencyKind }
  Wrapped: void /* scalar variant */
}

/**
 * Union type respresenting the CurrencyKind data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isCurrencyKind*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type CurrencyKind = beet.DataEnumKeyAsKind<CurrencyKindRecord>

export const isCurrencyKindPermissioned = (
  x: CurrencyKind
): x is CurrencyKind & { __kind: 'Permissioned' } => x.__kind === 'Permissioned'
export const isCurrencyKindWrapped = (
  x: CurrencyKind
): x is CurrencyKind & { __kind: 'Wrapped' } => x.__kind === 'Wrapped'

/**
 * @category userTypes
 * @category generated
 */
export const currencyKindBeet = beet.dataEnum<CurrencyKindRecord>([
  [
    'Permissioned',
    new beet.BeetArgsStruct<CurrencyKindRecord['Permissioned']>(
      [['kind', permissionedCurrencyKindBeet]],
      'CurrencyKindRecord["Permissioned"]'
    ),
  ],
  ['Wrapped', beet.unit],
]) as beet.FixableBeet<CurrencyKind, CurrencyKind>
