/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { HolderStatus, holderStatusBeet } from '../types/HolderStatus'

/**
 * Arguments used to create {@link HolderAccount}
 * @category Accounts
 * @category generated
 */
export type HolderAccountArgs = {
  bump: number
  currency: web3.PublicKey
  owner: web3.PublicKey
  tokenAccount: web3.PublicKey
  status: HolderStatus
  createdAt: beet.bignum
}

export const holderAccountDiscriminator = [164, 95, 70, 248, 145, 238, 169, 176]
/**
 * Holds the data for the {@link HolderAccount} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class HolderAccount implements HolderAccountArgs {
  private constructor(
    readonly bump: number,
    readonly currency: web3.PublicKey,
    readonly owner: web3.PublicKey,
    readonly tokenAccount: web3.PublicKey,
    readonly status: HolderStatus,
    readonly createdAt: beet.bignum
  ) {}

  /**
   * Creates a {@link HolderAccount} instance from the provided args.
   */
  static fromArgs(args: HolderAccountArgs) {
    return new HolderAccount(
      args.bump,
      args.currency,
      args.owner,
      args.tokenAccount,
      args.status,
      args.createdAt
    )
  }

  /**
   * Deserializes the {@link HolderAccount} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [HolderAccount, number] {
    return HolderAccount.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link HolderAccount} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<HolderAccount> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find HolderAccount account at ${address}`)
    }
    return HolderAccount.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'CrncyaGmZfWvpxRcpHEkSrqeeyQsdn4MAedo9KuARAc4'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, holderAccountBeet)
  }

  /**
   * Deserializes the {@link HolderAccount} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [HolderAccount, number] {
    return holderAccountBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link HolderAccount} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return holderAccountBeet.serialize({
      accountDiscriminator: holderAccountDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link HolderAccount}
   */
  static get byteSize() {
    return holderAccountBeet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link HolderAccount} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      HolderAccount.byteSize,
      commitment
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link HolderAccount} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === HolderAccount.byteSize
  }

  /**
   * Returns a readable version of {@link HolderAccount} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      bump: this.bump,
      currency: this.currency.toBase58(),
      owner: this.owner.toBase58(),
      tokenAccount: this.tokenAccount.toBase58(),
      status: 'HolderStatus.' + HolderStatus[this.status],
      createdAt: (() => {
        const x = <{ toNumber: () => number }>this.createdAt
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const holderAccountBeet = new beet.BeetStruct<
  HolderAccount,
  HolderAccountArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['bump', beet.u8],
    ['currency', beetSolana.publicKey],
    ['owner', beetSolana.publicKey],
    ['tokenAccount', beetSolana.publicKey],
    ['status', holderStatusBeet],
    ['createdAt', beet.i64],
  ],
  HolderAccount.fromArgs,
  'HolderAccount'
)
