/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category FixHolderAccount
 * @category generated
 */
export const fixHolderAccountStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'FixHolderAccountInstructionArgs'
)
/**
 * Accounts required by the _fixHolderAccount_ instruction
 *
 * @property [] currency
 * @property [_writable_] holderAccount
 * @property [_writable_] mint
 * @property [_writable_] tokenAccount
 * @property [**signer**] authority
 * @category Instructions
 * @category FixHolderAccount
 * @category generated
 */
export type FixHolderAccountInstructionAccounts = {
  currency: web3.PublicKey
  holderAccount: web3.PublicKey
  mint: web3.PublicKey
  tokenAccount: web3.PublicKey
  authority: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const fixHolderAccountInstructionDiscriminator = [
  190, 4, 188, 233, 197, 18, 30, 205,
]

/**
 * Creates a _FixHolderAccount_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category FixHolderAccount
 * @category generated
 */
export function createFixHolderAccountInstruction(
  accounts: FixHolderAccountInstructionAccounts,
  programId = new web3.PublicKey('CrncyaGmZfWvpxRcpHEkSrqeeyQsdn4MAedo9KuARAc4')
) {
  const [data] = fixHolderAccountStruct.serialize({
    instructionDiscriminator: fixHolderAccountInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.currency,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.holderAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
