/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { XpPair, xpPairBeet } from '../types/XpPair'
import {
  ResourceAmountPair,
  resourceAmountPairBeet,
} from '../types/ResourceAmountPair'

/**
 * Arguments used to create {@link Recipe}
 * @category Accounts
 * @category generated
 */
export type RecipeArgs = {
  bump: number
  project: web3.PublicKey
  key: web3.PublicKey
  xp: XpPair
  output: ResourceAmountPair
  inputs: ResourceAmountPair[]
}

export const recipeDiscriminator = [10, 162, 156, 100, 56, 193, 205, 77]
/**
 * Holds the data for the {@link Recipe} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Recipe implements RecipeArgs {
  private constructor(
    readonly bump: number,
    readonly project: web3.PublicKey,
    readonly key: web3.PublicKey,
    readonly xp: XpPair,
    readonly output: ResourceAmountPair,
    readonly inputs: ResourceAmountPair[]
  ) {}

  /**
   * Creates a {@link Recipe} instance from the provided args.
   */
  static fromArgs(args: RecipeArgs) {
    return new Recipe(
      args.bump,
      args.project,
      args.key,
      args.xp,
      args.output,
      args.inputs
    )
  }

  /**
   * Deserializes the {@link Recipe} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Recipe, number] {
    return Recipe.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Recipe} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<Recipe> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find Recipe account at ${address}`)
    }
    return Recipe.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      '4tJgAkjtSk6vFPtcXZeNybMsjrqRyWxKfPdeGu8bmh6y'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, recipeBeet)
  }

  /**
   * Deserializes the {@link Recipe} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Recipe, number] {
    return recipeBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link Recipe} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return recipeBeet.serialize({
      accountDiscriminator: recipeDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Recipe} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: RecipeArgs) {
    const instance = Recipe.fromArgs(args)
    return recipeBeet.toFixedFromValue({
      accountDiscriminator: recipeDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Recipe} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: RecipeArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Recipe.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link Recipe} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      bump: this.bump,
      project: this.project.toBase58(),
      key: this.key.toBase58(),
      xp: this.xp,
      output: this.output,
      inputs: this.inputs,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const recipeBeet = new beet.FixableBeetStruct<
  Recipe,
  RecipeArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['bump', beet.u8],
    ['project', beetSolana.publicKey],
    ['key', beetSolana.publicKey],
    ['xp', xpPairBeet],
    ['output', resourceAmountPairBeet],
    ['inputs', beet.array(resourceAmountPairBeet)],
  ],
  Recipe.fromArgs,
  'Recipe'
)
