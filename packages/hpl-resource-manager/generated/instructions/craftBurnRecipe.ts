/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  CraftBurnRecipeArgs,
  craftBurnRecipeArgsBeet,
} from '../types/CraftBurnRecipeArgs'

/**
 * @category Instructions
 * @category CraftBurnRecipe
 * @category generated
 */
export type CraftBurnRecipeInstructionArgs = {
  args: CraftBurnRecipeArgs
}
/**
 * @category Instructions
 * @category CraftBurnRecipe
 * @category generated
 */
export const craftBurnRecipeStruct = new beet.FixableBeetArgsStruct<
  CraftBurnRecipeInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', craftBurnRecipeArgsBeet],
  ],
  'CraftBurnRecipeInstructionArgs'
)
/**
 * Accounts required by the _craftBurnRecipe_ instruction
 *
 * @property [] project
 * @property [_writable_] recipe
 * @property [] wallet
 * @property [_writable_] recipeProof
 * @property [**signer**] authority
 * @property [_writable_, **signer**] payer
 * @property [] rentSysvar
 * @property [] clock
 * @property [] logWrapper
 * @property [] compressionProgram
 * @property [] inputResourceOne
 * @property [] inputResourceTwo (optional)
 * @property [] inputResourceThree (optional)
 * @property [] inputResourceFour (optional)
 * @category Instructions
 * @category CraftBurnRecipe
 * @category generated
 */
export type CraftBurnRecipeInstructionAccounts = {
  project: web3.PublicKey
  recipe: web3.PublicKey
  wallet: web3.PublicKey
  recipeProof: web3.PublicKey
  authority: web3.PublicKey
  payer: web3.PublicKey
  rentSysvar: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  clock: web3.PublicKey
  logWrapper: web3.PublicKey
  compressionProgram: web3.PublicKey
  inputResourceOne: web3.PublicKey
  inputResourceTwo?: web3.PublicKey
  inputResourceThree?: web3.PublicKey
  inputResourceFour?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const craftBurnRecipeInstructionDiscriminator = [
  171, 123, 42, 144, 226, 145, 145, 18,
]

/**
 * Creates a _CraftBurnRecipe_ instruction.
 *
 * Optional accounts that are not provided default to the program ID since
 * this was indicated in the IDL from which this instruction was generated.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CraftBurnRecipe
 * @category generated
 */
export function createCraftBurnRecipeInstruction(
  accounts: CraftBurnRecipeInstructionAccounts,
  args: CraftBurnRecipeInstructionArgs,
  programId = new web3.PublicKey('Assetw8uxLogzVXic5P8wGYpVdesS1oZHfSnBFHAu42s')
) {
  const [data] = craftBurnRecipeStruct.serialize({
    instructionDiscriminator: craftBurnRecipeInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.project,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.recipe,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.wallet,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.recipeProof,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.rentSysvar,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.clock,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.logWrapper,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.compressionProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.inputResourceOne,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.inputResourceTwo ?? programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.inputResourceThree ?? programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.inputResourceFour ?? programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
