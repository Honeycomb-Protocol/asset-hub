/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  CreateNewResourceArgs,
  createNewResourceArgsBeet,
} from '../types/CreateNewResourceArgs'

/**
 * @category Instructions
 * @category CreateNewResource
 * @category generated
 */
export type CreateNewResourceInstructionArgs = {
  args: CreateNewResourceArgs
}
/**
 * @category Instructions
 * @category CreateNewResource
 * @category generated
 */
export const createNewResourceStruct = new beet.FixableBeetArgsStruct<
  CreateNewResourceInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', createNewResourceArgsBeet],
  ],
  'CreateNewResourceInstructionArgs'
)
/**
 * Accounts required by the _createNewResource_ instruction
 *
 * @property [] project
 * @property [_writable_] resource
 * @property [_writable_, **signer**] owner
 * @property [_writable_, **signer**] payer
 * @property [_writable_, **signer**] mint
 * @property [] rentSysvar
 * @property [] token22Program
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category CreateNewResource
 * @category generated
 */
export type CreateNewResourceInstructionAccounts = {
  project: web3.PublicKey
  resource: web3.PublicKey
  owner: web3.PublicKey
  payer: web3.PublicKey
  mint: web3.PublicKey
  systemProgram?: web3.PublicKey
  rentSysvar: web3.PublicKey
  token22Program: web3.PublicKey
  tokenProgram?: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createNewResourceInstructionDiscriminator = [
  219, 143, 145, 122, 125, 143, 185, 71,
]

/**
 * Creates a _CreateNewResource_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateNewResource
 * @category generated
 */
export function createCreateNewResourceInstruction(
  accounts: CreateNewResourceInstructionAccounts,
  args: CreateNewResourceInstructionArgs,
  programId = new web3.PublicKey('6ARwjKsMY2P3eLEWhdoU5czNezw3Qg6jEfbmLTVQqrPQ')
) {
  const [data] = createNewResourceStruct.serialize({
    instructionDiscriminator: createNewResourceInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.project,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.resource,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.owner,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.mint,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rentSysvar,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.token22Program,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
