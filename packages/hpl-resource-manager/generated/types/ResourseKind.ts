/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
/**
 * This type is used to derive the {@link ResourseKind} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link ResourseKind} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type ResourseKindRecord = {
  Fungible: { decimals: number }
  INF: { characteristics: string[]; supply: number }
  NonFungible: void /* scalar variant */
}

/**
 * Union type respresenting the ResourseKind data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isResourseKind*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type ResourseKind = beet.DataEnumKeyAsKind<ResourseKindRecord>

export const isResourseKindFungible = (
  x: ResourseKind
): x is ResourseKind & { __kind: 'Fungible' } => x.__kind === 'Fungible'
export const isResourseKindINF = (
  x: ResourseKind
): x is ResourseKind & { __kind: 'INF' } => x.__kind === 'INF'
export const isResourseKindNonFungible = (
  x: ResourseKind
): x is ResourseKind & { __kind: 'NonFungible' } => x.__kind === 'NonFungible'

/**
 * @category userTypes
 * @category generated
 */
export const resourseKindBeet = beet.dataEnum<ResourseKindRecord>([
  [
    'Fungible',
    new beet.BeetArgsStruct<ResourseKindRecord['Fungible']>(
      [['decimals', beet.u8]],
      'ResourseKindRecord["Fungible"]'
    ),
  ],

  [
    'INF',
    new beet.FixableBeetArgsStruct<ResourseKindRecord['INF']>(
      [
        ['characteristics', beet.array(beet.utf8String)],
        ['supply', beet.u32],
      ],
      'ResourseKindRecord["INF"]'
    ),
  ],
  ['NonFungible', beet.unit],
]) as beet.FixableBeet<ResourseKind, ResourseKind>
