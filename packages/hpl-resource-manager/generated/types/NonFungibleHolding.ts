/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
/**
 * This type is used to derive the {@link NonFungibleHolding} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link NonFungibleHolding} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type NonFungibleHoldingRecord = {
  Holder: { fields: [web3.PublicKey] }
  Eject: { mint: web3.PublicKey; holder: web3.PublicKey }
}

/**
 * Union type respresenting the NonFungibleHolding data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isNonFungibleHolding*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type NonFungibleHolding =
  beet.DataEnumKeyAsKind<NonFungibleHoldingRecord>

export const isNonFungibleHoldingHolder = (
  x: NonFungibleHolding
): x is NonFungibleHolding & { __kind: 'Holder' } => x.__kind === 'Holder'
export const isNonFungibleHoldingEject = (
  x: NonFungibleHolding
): x is NonFungibleHolding & { __kind: 'Eject' } => x.__kind === 'Eject'

/**
 * @category userTypes
 * @category generated
 */
export const nonFungibleHoldingBeet = beet.dataEnum<NonFungibleHoldingRecord>([
  [
    'Holder',
    new beet.BeetArgsStruct<NonFungibleHoldingRecord['Holder']>(
      [['fields', beet.fixedSizeTuple([beetSolana.publicKey])]],
      'NonFungibleHoldingRecord["Holder"]'
    ),
  ],

  [
    'Eject',
    new beet.BeetArgsStruct<NonFungibleHoldingRecord['Eject']>(
      [
        ['mint', beetSolana.publicKey],
        ['holder', beetSolana.publicKey],
      ],
      'NonFungibleHoldingRecord["Eject"]'
    ),
  ],
]) as beet.FixableBeet<NonFungibleHolding, NonFungibleHolding>
